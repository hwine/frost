# This is a beginning annotated schema
# The schema was generated by 'genson' [1], then converted to yaml by
# 'json2yaml' [2] which should preserve order allowing future deltas to
# be merged.
#
# Future work:
# - integrate schema checking into frost tests, based on foxsec/services
# - integrate cleanly into docs
$schema: http://json-schema.org/schema#
type: object
properties:
  created_at:
    # report generation time, in RFC-3339 (~ISO-8601) format
    type: string
  meanings:
    # human description of the severity levels
    # each contained object has the short & long descriptions for the
    # severity level which is the property name
    type: object
    properties:
      err:
        type: object
        properties:
          long:
            type: string
          short:
            type: string
        required:
        - long
        - short
      fail:
        type: object
        properties:
          long:
            type: string
          short:
            type: string
        required:
        - long
        - short
      pass:
        type: object
        properties:
          long:
            type: string
          short:
            type: string
        required:
        - long
        - short
      warn:
        type: object
        properties:
          long:
            type: string
          short:
            type: string
        required:
        - long
        - short
    required:
    - err
    - fail
    - pass
    - warn
  name:
    # name of the generating system. "frost" in this case
    type: string
  results:
    # All of the test results from the frost run
    # N.B. there may be variations of some of the fields that have not
    # yet been captured.
    type: array
    items:
      type: object
      properties:
        description:  # currently unused
          type: 'null'
        # pytest markers for test. Unknown if/how they change based on
        # using markers as filters for test selection
        markers:
          type: object
          properties:
            parametrize:
              type: object
              properties:
                args:
                  type: array
                  items:
                    type: string
                kwargs:
                  type: array
                  items:
                    type: string
                name:
                  type: string
              required:
              - args
              - kwargs
              - name
            xfail:
              type: object
              properties:
                args:
                  type: array
                kwargs:
                  type: object
                  properties:
                    expiration:
                      type: string
                    reason:
                      type: string
                    strict:
                      type: boolean
                  required:
                  - expiration
                  - reason
                  - strict
                name:
                  type: string
              required:
              - args
              - kwargs
              - name
          required:
          - parametrize
        # metadata is the "frost enhancement" to pytest. Each service
        # can specify which dictionary data passed to each test
        # invocation is added to this dictionary.
        metadata:
          type: object
          properties:
            branch:
              type: string
            owner:
              type: string
            repo:
              type: string
            standard_number:
              type: string
            status:
              type: string
            login:
              type: string
            org_name:
              type: string
            org_v4id:
              type: string
            requires_two_factor_authentication:
              type: boolean
          required:
          - standard_number
        # This is the full, parametrized, name of the test, as computed
        # by pytest (in association with the idfn functions typically
        # provided by each service)
        name:
          type: string
        # Human understandable description the test has value. I.e. why
        # should the report reader care if it fails. Provided via a
        # pytest decorator to the test
        rationale:
          type:
          - 'null'
          - string
        # A more technical description of the test
        reason:
          type:
          - 'null'
          - string
        regression:
          type: 'null'
        # A unique name for the specific resource in the service being
        # tested. Ideally, the name is stable across multiple runs.
        # Value is the parametrized string reported by pytest
        resource_name:
          type: string
        severity:
          type: 'null'
        # An enum (tbd) of the severity of the finding
        # produced by ?????
        status:
          type: string
        # The name of the test function/method that produced this result
        test_name:
          type: string
        # The pytest native result of the test (enum tbd)
        value:
          type: string
      required:
      - description
      - markers
      - metadata
      - name
      - rationale
      - reason
      - regression
      - resource_name
      - severity
      - status
      - test_name
      - value
  # Nominal source repo for the tool mentioned in the "name" property
  tool_url:
    type: string
  # ???? version of what? output format? tool?
  version:
    type: integer
required:
- created_at
- meanings
- name
- results
- tool_url
- version
